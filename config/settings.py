"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path
from django.utils.translation import gettext_lazy as _

from django.core.handlers.wsgi import WSGIRequest
from django.urls import get_script_prefix


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

GOOGLE_APPLICATION_CREDENTIALS = os.path.join(
    BASE_DIR, "config/credentials/gcp-credentials.json"
)

os.environ.setdefault("GOOGLE_APPLICATION_CREDENTIALS", GOOGLE_APPLICATION_CREDENTIALS)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-vf2s+b%2=pn+=-2%12rjxv5@19dl**mk$-!&nsya10ppxvp!$$"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["fazenda.sprezz.fr", "164.132.58.209", "*"]
CSRF_TRUSTED_ORIGINS = ["https://fazenda.sprezz.fr"]

INTERNAL_IPS = ["127.0.0.1", "https://fazenda.sprezz.fr"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

THIRD_PARTY_APPS = [
    "image_labelling_tool",
    "jazzmin",
    "django_extensions",
    "debug_toolbar",
]

from easy_thumbnails.conf import Settings as thumbnail_settings

THUMBNAIL_PROCESSORS = (
    "image_cropping.thumbnail_processors.crop_corners",
) + thumbnail_settings.THUMBNAIL_PROCESSORS

MY_APPS = [
    "fazenda",
]

INSTALLED_APPS = THIRD_PARTY_APPS + INSTALLED_APPS + MY_APPS


MIDDLEWARE = [
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

WAGTAIL_SITE_NAME = "My Example Site"

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates", BASE_DIR / "fazenda/templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

SPATIALITE_LIBRARY_PATH = "/usr/lib/x86_64-linux-gnu/mod_spatialite.so"


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "pt-br"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

STATIC_ROOT = "static/"

MEDIA_URL = "/media/"

MEDIA_ROOT = os.path.join(BASE_DIR, "media/")

STATICFILES_DIRS = [
    ("fazenda", STATIC_ROOT + "fazenda"),
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


def show_toolbar(request):
    return True


DEBUG_TOOLBAR_CONFIG = {
    "SHOW_TOOLBAR_CALLBACK": show_toolbar,
}

JAZZMIN_UI_TWEAKS = {}

JAZZMIN_SETTINGS = {
    # title of the window (Will default to current_admin_site.site_title if absent or None)
    "site_title": "Griselda Admin",
    # Title on the login screen (19 chars max) (defaults to current_admin_site.site_header if absent or None)
    "site_header": "Griselda Admin",
    # Title on the brand (19 chars max) (defaults to current_admin_site.site_header if absent or None)
    "site_brand": "Griselda Admin",
    "site_logo": "fazenda/cow.png",
    "login_logo": "fazenda/cow-login-square.png",
    # Logo to use for login form in dark themes (defaults to login_logo)
    "login_logo_dark": None,
    # CSS classes that are applied to the logo above
    "site_logo_classes": "img-circle",
    # Relative path to a favicon for your site, will default to site_logo if absent (ideally 32x32 px)
    "site_icon": None,
    # Welcome text on the login screen
    "welcome_sign": _("Bienvenu à Griselda!"),
    "goodbye_sign": _("À la prochaine!"),
    # Copyright on the footer
    "copyright": "COPYRIGHT",
    # List of model admins to search from the search bar, search bar omitted if excluded
    # If you want to use a single search field you dont need to use a list, you can use a simple string
    "search_model": ["auth.User", "auth.Group"],
    # Field name on user model that contains avatar ImageField/URLField/Charfield or a callable that receives the user
    "user_avatar": None,
    ############
    # Top Menu #
    ############
    # Links to put along the top menu
    "topmenu_links": [
        # Url that gets reversed (Permissions can be added)
        {"name": "Home", "url": "admin:index", "permissions": ["auth.view_user"]},
        # model admin to link to (Permissions checked against model)
        {"model": "auth.User"},
    ],
    #############
    # Side Menu #
    #############
    # Whether to display the side menu
    "show_sidebar": True,
    # Whether to aut expand the menu
    "navigation_expanded": True,
    # Hide these apps when generating side menu e.g (auth)
    "hide_apps": [],
    # Hide these models when generating side menu (e.g auth.user)
    "hide_models": [],
    # List of apps (and/or models) to base side menu ordering off of (does not need to contain all apps/models)
    # Custom icons for side menu apps/models See https://fontawesome.com/icons?d=gallery&m=free&v=5.0.0,5.0.1,5.0.10,5.0.11,5.0.12,5.0.13,5.0.2,5.0.3,5.0.4,5.0.5,5.0.6,5.0.7,5.0.8,5.0.9,5.1.0,5.1.1,5.2.0,5.3.0,5.3.1,5.4.0,5.4.1,5.4.2,5.13.0,5.12.0,5.11.2,5.11.1,5.10.0,5.9.0,5.8.2,5.8.1,5.7.2,5.7.1,5.7.0,5.6.3,5.5.0,5.4.2
    # for the full list of 5.13.0 free icon classes
    # Icons that are used when one is not manually specified
    "default_icon_parents": "fas fa-chevron-circle-right",
    "default_icon_children": "fas fa-circle",
    #################
    # Related Modal #
    #################
    # Use modals instead of popups
    "related_modal_active": False,
    #############
    # UI Tweaks #
    #############
    # Relative paths to custom CSS/JS scripts (must be present in static files)
    "custom_css": None,
    "custom_js": None,
    # Whether to link font from fonts.googleapis.com (use custom_css to supply font otherwise)
    "use_google_fonts_cdn": True,
    # Whether to show the UI customizer on the sidebar
    "show_ui_builder": True,
    ###############
    # Change view #
    ###############
    # Render out the change view as a single form, or in tabs, current options are
    # - single
    # - horizontal_tabs (default)
    # - vertical_tabs
    # - collapsible
    # - carousel
    "changeform_format": "vertical_tabs",
    # override change forms on a per modeladmin basis
    "changeform_format_overrides": {
        "auth.user": "collapsible",
        "auth.group": "vertical_tabs",
    },
}

# Configuration
LABELLING_TOOL_CONFIG = {
    "useClassSelectorPopup": True,
    "tools": {
        "imageSelector": True,
        "labelClassSelector": True,
        "brushSelect": True,
        "labelClassFilter": True,
        "drawPointLabel": False,
        "drawBoxLabel": True,
        "drawOrientedEllipseLabel": True,
        "drawPolyLabel": True,
        "deleteLabel": True,
        "deleteConfig": {
            "typePermissions": {
                "point": True,
                "box": True,
                "polygon": True,
                "composite": True,
                "group": True,
            }
        },
    },
    "settings": {
        "brushWheelRate": 0.025,  # Change rate for brush radius (mouse wheel)
        "brushKeyRate": 2.0,  # Change rate for brush radius (keyboard)
    },
}

LABELLING_TOOL_ENABLE_LOCKING = False
LABELLING_TOOL_DEXTR_AVAILABLE = False
LABELLING_TOOL_DEXTR_POLLING_INTERVAL = 1000
LABELLING_TOOL_DEXTR_WEIGHTS_PATH = None


LABELLING_TOOL_EXTERNAL_LABEL_API = False
LABELLING_TOOL_EXTERNAL_LABEL_API_URL = "http://localhost:3000/get_labels"


CELERY_BROKER_URL = "amqp://guest@localhost//"
CELERY_RESULT_BACKEND = "rpc://"

CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"

from image_labelling_tool import labelling_tool

ANNO_CONTROLS = [
    labelling_tool.AnnoControlCheckbox(
        "good_quality", "Good quality", visibility_label_text="Filter by good quality"
    ),
    labelling_tool.AnnoControlRadioButtons(
        "visibility",
        "Visible",
        choices=[
            labelling_tool.AnnoControlRadioButtons.choice(
                value="full", label_text="Fully", tooltip="Object is fully visible"
            ),
            labelling_tool.AnnoControlRadioButtons.choice(
                value="mostly", label_text="Mostly", tooltip="Object is mostly visible"
            ),
            labelling_tool.AnnoControlRadioButtons.choice(
                value="obscured",
                label_text="Obscured",
                tooltip="Object is significantly obscured",
            ),
        ],
        label_on_own_line=False,
        visibility_label_text="Filter by visibility",
    ),
    labelling_tool.AnnoControlPopupMenu(
        "material",
        "Material",
        groups=[
            labelling_tool.AnnoControlPopupMenu.group(
                label_text="Artifical/buildings",
                choices=[
                    labelling_tool.AnnoControlPopupMenu.choice(
                        value="concrete",
                        label_text="Concrete",
                        tooltip="Concrete objects",
                    ),
                    labelling_tool.AnnoControlPopupMenu.choice(
                        value="plastic", label_text="Plastic", tooltip="Plastic objects"
                    ),
                    labelling_tool.AnnoControlPopupMenu.choice(
                        value="asphalt",
                        label_text="Asphalt",
                        tooltip="Road, pavement, etc.",
                    ),
                ],
            ),
            labelling_tool.AnnoControlPopupMenu.group(
                label_text="Flat natural",
                choices=[
                    labelling_tool.AnnoControlPopupMenu.choice(
                        value="grass",
                        label_text="Grass",
                        tooltip="Grass covered ground",
                    ),
                    labelling_tool.AnnoControlPopupMenu.choice(
                        value="water", label_text="Water", tooltip="Water/lake"
                    ),
                ],
            ),
            labelling_tool.AnnoControlPopupMenu.group(
                label_text="Vegetation",
                choices=[
                    labelling_tool.AnnoControlPopupMenu.choice(
                        value="trees", label_text="Trees", tooltip="Trees"
                    ),
                    labelling_tool.AnnoControlPopupMenu.choice(
                        value="shrubbery", label_text="Shrubs", tooltip="Shrubs/bushes"
                    ),
                    labelling_tool.AnnoControlPopupMenu.choice(
                        value="flowers", label_text="Flowers", tooltip="Flowers"
                    ),
                    labelling_tool.AnnoControlPopupMenu.choice(
                        value="ivy", label_text="Ivy", tooltip="Ivy"
                    ),
                ],
            ),
        ],
        visibility_label_text="Filter by material",
    ),
]
